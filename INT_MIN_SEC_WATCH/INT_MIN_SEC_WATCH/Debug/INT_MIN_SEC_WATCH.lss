
INT_MIN_SEC_WATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000be4  00000c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  0080016c  0080016c  00000ce4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002143  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112e  00000000  00000000  00003077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ee  00000000  00000000  000041a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00005294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c4  00000000  00000000  00005630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082f  00000000  00000000  00005ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	85 c2       	rjmp	.+1290   	; 0x54c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	12 c4       	rjmp	.+2084   	; 0x86e <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 36       	cpi	r26, 0x6C	; 108
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ac e6       	ldi	r26, 0x6C	; 108
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 33       	cpi	r26, 0x3F	; 63
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c9 d2       	rcall	.+1426   	; 0x656 <main>
  c4:	8d c5       	rjmp	.+2842   	; 0xbe0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button1>:
  d0:	80 b3       	in	r24, 0x10	; 16
  d2:	80 71       	andi	r24, 0x10	; 16
  d4:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <prev_state.1735>
  d8:	91 11       	cpse	r25, r1
  da:	11 c0       	rjmp	.+34     	; 0xfe <get_button1+0x2e>
  dc:	88 23       	and	r24, r24
  de:	79 f0       	breq	.+30     	; 0xfe <get_button1+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8d ee       	ldi	r24, 0xED	; 237
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <get_button1+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <get_button1+0x20>
  f0:	00 00       	nop
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <prev_state.1735>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
  fe:	91 30       	cpi	r25, 0x01	; 1
 100:	81 f4       	brne	.+32     	; 0x122 <get_button1+0x52>
 102:	81 11       	cpse	r24, r1
 104:	11 c0       	rjmp	.+34     	; 0x128 <get_button1+0x58>
 106:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <prev_state.1735>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	86 e7       	ldi	r24, 0x76	; 118
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <get_button1+0x40>
 118:	00 c0       	rjmp	.+0      	; 0x11a <get_button1+0x4a>
 11a:	00 00       	nop
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret

0000012e <get_button2>:
 12e:	80 b3       	in	r24, 0x10	; 16
 130:	80 72       	andi	r24, 0x20	; 32
 132:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <prev_state.1739>
 136:	91 11       	cpse	r25, r1
 138:	11 c0       	rjmp	.+34     	; 0x15c <get_button2+0x2e>
 13a:	88 23       	and	r24, r24
 13c:	79 f0       	breq	.+30     	; 0x15c <get_button2+0x2e>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	8d ee       	ldi	r24, 0xED	; 237
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <get_button2+0x16>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <get_button2+0x20>
 14e:	00 00       	nop
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <prev_state.1739>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret
 15c:	91 30       	cpi	r25, 0x01	; 1
 15e:	81 f4       	brne	.+32     	; 0x180 <get_button2+0x52>
 160:	81 11       	cpse	r24, r1
 162:	11 c0       	rjmp	.+34     	; 0x186 <get_button2+0x58>
 164:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <prev_state.1739>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	86 e7       	ldi	r24, 0x76	; 118
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <get_button2+0x40>
 176:	00 c0       	rjmp	.+0      	; 0x178 <get_button2+0x4a>
 178:	00 00       	nop
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret

0000018c <get_button3>:
 18c:	80 b3       	in	r24, 0x10	; 16
 18e:	80 74       	andi	r24, 0x40	; 64
 190:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__data_end>
 194:	91 11       	cpse	r25, r1
 196:	11 c0       	rjmp	.+34     	; 0x1ba <get_button3+0x2e>
 198:	88 23       	and	r24, r24
 19a:	79 f0       	breq	.+30     	; 0x1ba <get_button3+0x2e>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	8d ee       	ldi	r24, 0xED	; 237
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <get_button3+0x16>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <get_button3+0x20>
 1ac:	00 00       	nop
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret
 1ba:	91 30       	cpi	r25, 0x01	; 1
 1bc:	81 f4       	brne	.+32     	; 0x1de <get_button3+0x52>
 1be:	81 11       	cpse	r24, r1
 1c0:	11 c0       	rjmp	.+34     	; 0x1e4 <get_button3+0x58>
 1c2:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	86 e7       	ldi	r24, 0x76	; 118
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <get_button3+0x40>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <get_button3+0x4a>
 1d6:	00 00       	nop
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 95       	ret

000001ea <set_fnd_data>:
 1ea:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <fnd_data+0x1>
 1ee:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <fnd_data>
 1f2:	08 95       	ret

000001f4 <get_fnd_data>:
 1f4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <fnd_data>
 1f8:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <fnd_data+0x1>
 1fc:	08 95       	ret

000001fe <display_fnd>:
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	2a 97       	sbiw	r28, 0x0a	; 10
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	ee e0       	ldi	r30, 0x0E	; 14
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	de 01       	movw	r26, r28
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	8a 95       	dec	r24
 222:	e1 f7       	brne	.-8      	; 0x21c <display_fnd+0x1e>
 224:	e7 df       	rcall	.-50     	; 0x1f4 <get_fnd_data>
 226:	ac 01       	movw	r20, r24
 228:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <digit_position.1620>
 22c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <digit_position.1620+0x1>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	91 05       	cpc	r25, r1
 234:	61 f1       	breq	.+88     	; 0x28e <display_fnd+0x90>
 236:	40 f0       	brcs	.+16     	; 0x248 <display_fnd+0x4a>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	91 05       	cpc	r25, r1
 23c:	09 f4       	brne	.+2      	; 0x240 <display_fnd+0x42>
 23e:	53 c0       	rjmp	.+166    	; 0x2e6 <display_fnd+0xe8>
 240:	03 97       	sbiw	r24, 0x03	; 3
 242:	09 f4       	brne	.+2      	; 0x246 <display_fnd+0x48>
 244:	7e c0       	rjmp	.+252    	; 0x342 <display_fnd+0x144>
 246:	aa c0       	rjmp	.+340    	; 0x39c <display_fnd+0x19e>
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	88 bb       	out	0x18, r24	; 24
 24c:	9a 01       	movw	r18, r20
 24e:	ad ec       	ldi	r26, 0xCD	; 205
 250:	bc ec       	ldi	r27, 0xCC	; 204
 252:	79 d4       	rcall	.+2290   	; 0xb46 <__umulhisi3>
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	9c 01       	movw	r18, r24
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	9a 01       	movw	r18, r20
 278:	28 1b       	sub	r18, r24
 27a:	39 0b       	sbc	r19, r25
 27c:	e1 e0       	ldi	r30, 0x01	; 1
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ec 0f       	add	r30, r28
 282:	fd 1f       	adc	r31, r29
 284:	e2 0f       	add	r30, r18
 286:	f3 1f       	adc	r31, r19
 288:	80 81       	ld	r24, Z
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	87 c0       	rjmp	.+270    	; 0x39c <display_fnd+0x19e>
 28e:	80 e4       	ldi	r24, 0x40	; 64
 290:	88 bb       	out	0x18, r24	; 24
 292:	9a 01       	movw	r18, r20
 294:	ad ec       	ldi	r26, 0xCD	; 205
 296:	bc ec       	ldi	r27, 0xCC	; 204
 298:	56 d4       	rcall	.+2220   	; 0xb46 <__umulhisi3>
 29a:	ac 01       	movw	r20, r24
 29c:	56 95       	lsr	r21
 29e:	47 95       	ror	r20
 2a0:	56 95       	lsr	r21
 2a2:	47 95       	ror	r20
 2a4:	56 95       	lsr	r21
 2a6:	47 95       	ror	r20
 2a8:	9a 01       	movw	r18, r20
 2aa:	4d d4       	rcall	.+2202   	; 0xb46 <__umulhisi3>
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	96 95       	lsr	r25
 2b6:	87 95       	ror	r24
 2b8:	9c 01       	movw	r18, r24
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	82 0f       	add	r24, r18
 2cc:	93 1f       	adc	r25, r19
 2ce:	9a 01       	movw	r18, r20
 2d0:	28 1b       	sub	r18, r24
 2d2:	39 0b       	sbc	r19, r25
 2d4:	e1 e0       	ldi	r30, 0x01	; 1
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
 2dc:	e2 0f       	add	r30, r18
 2de:	f3 1f       	adc	r31, r19
 2e0:	80 81       	ld	r24, Z
 2e2:	85 bb       	out	0x15, r24	; 21
 2e4:	5b c0       	rjmp	.+182    	; 0x39c <display_fnd+0x19e>
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	88 bb       	out	0x18, r24	; 24
 2ea:	9a 01       	movw	r18, r20
 2ec:	36 95       	lsr	r19
 2ee:	27 95       	ror	r18
 2f0:	36 95       	lsr	r19
 2f2:	27 95       	ror	r18
 2f4:	ab e7       	ldi	r26, 0x7B	; 123
 2f6:	b4 e1       	ldi	r27, 0x14	; 20
 2f8:	26 d4       	rcall	.+2124   	; 0xb46 <__umulhisi3>
 2fa:	ac 01       	movw	r20, r24
 2fc:	56 95       	lsr	r21
 2fe:	47 95       	ror	r20
 300:	9a 01       	movw	r18, r20
 302:	ad ec       	ldi	r26, 0xCD	; 205
 304:	bc ec       	ldi	r27, 0xCC	; 204
 306:	1f d4       	rcall	.+2110   	; 0xb46 <__umulhisi3>
 308:	96 95       	lsr	r25
 30a:	87 95       	ror	r24
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	9c 01       	movw	r18, r24
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	82 0f       	add	r24, r18
 328:	93 1f       	adc	r25, r19
 32a:	9a 01       	movw	r18, r20
 32c:	28 1b       	sub	r18, r24
 32e:	39 0b       	sbc	r19, r25
 330:	e1 e0       	ldi	r30, 0x01	; 1
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ec 0f       	add	r30, r28
 336:	fd 1f       	adc	r31, r29
 338:	e2 0f       	add	r30, r18
 33a:	f3 1f       	adc	r31, r19
 33c:	80 81       	ld	r24, Z
 33e:	85 bb       	out	0x15, r24	; 21
 340:	2d c0       	rjmp	.+90     	; 0x39c <display_fnd+0x19e>
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	88 bb       	out	0x18, r24	; 24
 346:	9a 01       	movw	r18, r20
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	36 95       	lsr	r19
 34e:	27 95       	ror	r18
 350:	36 95       	lsr	r19
 352:	27 95       	ror	r18
 354:	a5 ec       	ldi	r26, 0xC5	; 197
 356:	b0 e2       	ldi	r27, 0x20	; 32
 358:	f6 d3       	rcall	.+2028   	; 0xb46 <__umulhisi3>
 35a:	ac 01       	movw	r20, r24
 35c:	52 95       	swap	r21
 35e:	42 95       	swap	r20
 360:	4f 70       	andi	r20, 0x0F	; 15
 362:	45 27       	eor	r20, r21
 364:	5f 70       	andi	r21, 0x0F	; 15
 366:	45 27       	eor	r20, r21
 368:	9a 01       	movw	r18, r20
 36a:	ab ea       	ldi	r26, 0xAB	; 171
 36c:	ba ea       	ldi	r27, 0xAA	; 170
 36e:	eb d3       	rcall	.+2006   	; 0xb46 <__umulhisi3>
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	9c 01       	movw	r18, r24
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	9a 01       	movw	r18, r20
 388:	28 1b       	sub	r18, r24
 38a:	39 0b       	sbc	r19, r25
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ec 0f       	add	r30, r28
 392:	fd 1f       	adc	r31, r29
 394:	e2 0f       	add	r30, r18
 396:	f3 1f       	adc	r31, r19
 398:	80 81       	ld	r24, Z
 39a:	85 bb       	out	0x15, r24	; 21
 39c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <digit_position.1620>
 3a0:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <digit_position.1620+0x1>
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	83 70       	andi	r24, 0x03	; 3
 3a8:	99 27       	eor	r25, r25
 3aa:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <digit_position.1620+0x1>
 3ae:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <digit_position.1620>
 3b2:	2a 96       	adiw	r28, 0x0a	; 10
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <init_fnd>:
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	84 bb       	out	0x14, r24	; 20
 3c8:	87 b3       	in	r24, 0x17	; 23
 3ca:	80 6f       	ori	r24, 0xF0	; 240
 3cc:	87 bb       	out	0x17, r24	; 23
 3ce:	15 ba       	out	0x15, r1	; 21
 3d0:	08 95       	ret

000003d2 <init_led>:
//  2: shift_left_led_on
//  3: shift_right_led_on

void init_led()
{
	DDRA = 0xff;
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	8a bb       	out	0x1a, r24	; 26
 3d6:	08 95       	ret

000003d8 <shiftleftledon>:



void shiftleftledon(void)
{
		for (int i = 0; i<8; i++)
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	13 c0       	rjmp	.+38     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			PORTA = 0x01 << i;
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	08 2e       	mov	r0, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <shiftleftledon+0x12>
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <shiftleftledon+0xe>
 3ee:	2b bb       	out	0x1b, r18	; 27
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	35 ea       	ldi	r19, 0xA5	; 165
 3f4:	4e e0       	ldi	r20, 0x0E	; 14
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	30 40       	sbci	r19, 0x00	; 0
 3fa:	40 40       	sbci	r20, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <shiftleftledon+0x1e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop



void shiftleftledon(void)
{
		for (int i = 0; i<8; i++)
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	91 05       	cpc	r25, r1
 408:	54 f3       	brlt	.-44     	; 0x3de <shiftleftledon+0x6>
		{
			PORTA = 0x01 << i;
			_delay_ms(300);
		}
		
}
 40a:	08 95       	ret

0000040c <shiftrightledon>:

void shiftrightledon(void)
{
	for (int i = 0; i<8; i++)
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	13 c0       	rjmp	.+38     	; 0x438 <shiftrightledon+0x2c>
	{
		PORTA = 0x80 >> i;
 412:	20 e8       	ldi	r18, 0x80	; 128
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	08 2e       	mov	r0, r24
 418:	02 c0       	rjmp	.+4      	; 0x41e <shiftrightledon+0x12>
 41a:	35 95       	asr	r19
 41c:	27 95       	ror	r18
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <shiftrightledon+0xe>
 422:	2b bb       	out	0x1b, r18	; 27
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	35 ea       	ldi	r19, 0xA5	; 165
 428:	4e e0       	ldi	r20, 0x0E	; 14
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	30 40       	sbci	r19, 0x00	; 0
 42e:	40 40       	sbci	r20, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <shiftrightledon+0x1e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <shiftrightledon+0x28>
 434:	00 00       	nop
		
}

void shiftrightledon(void)
{
	for (int i = 0; i<8; i++)
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	88 30       	cpi	r24, 0x08	; 8
 43a:	91 05       	cpc	r25, r1
 43c:	54 f3       	brlt	.-44     	; 0x412 <shiftrightledon+0x6>
	{
		PORTA = 0x80 >> i;
		_delay_ms(300);
	}
}
 43e:	08 95       	ret

00000440 <shiftleftholdledon>:

void shiftleftholdledon(void)
{
	PORTA = 0x00;
 440:	1b ba       	out	0x1b, r1	; 27
	for (int i = 0; i<8; i++)
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	16 c0       	rjmp	.+44     	; 0x474 <shiftleftholdledon+0x34>
	{
		PORTA |= 0x01 << i;
 448:	4b b3       	in	r20, 0x1b	; 27
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <shiftleftholdledon+0x16>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <shiftleftholdledon+0x12>
 45a:	84 2b       	or	r24, r20
 45c:	8b bb       	out	0x1b, r24	; 27
 45e:	4f ef       	ldi	r20, 0xFF	; 255
 460:	85 ea       	ldi	r24, 0xA5	; 165
 462:	9e e0       	ldi	r25, 0x0E	; 14
 464:	41 50       	subi	r20, 0x01	; 1
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <shiftleftholdledon+0x24>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <shiftleftholdledon+0x2e>
 46e:	00 00       	nop
}

void shiftleftholdledon(void)
{
	PORTA = 0x00;
	for (int i = 0; i<8; i++)
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
 474:	28 30       	cpi	r18, 0x08	; 8
 476:	31 05       	cpc	r19, r1
 478:	3c f3       	brlt	.-50     	; 0x448 <shiftleftholdledon+0x8>
	{
		PORTA |= 0x01 << i;
		_delay_ms(300);
	}
}
 47a:	08 95       	ret

0000047c <shiftrightholdledon>:

void shiftrightholdledon(void)
{
	PORTA = 0x00;
 47c:	1b ba       	out	0x1b, r1	; 27
	for (int i = 0; i<8; i++)
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	16 c0       	rjmp	.+44     	; 0x4b0 <shiftrightholdledon+0x34>
	{
		PORTA |= 0x80 >> i;
 484:	4b b3       	in	r20, 0x1b	; 27
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 2e       	mov	r0, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <shiftrightholdledon+0x16>
 48e:	95 95       	asr	r25
 490:	87 95       	ror	r24
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <shiftrightholdledon+0x12>
 496:	84 2b       	or	r24, r20
 498:	8b bb       	out	0x1b, r24	; 27
 49a:	4f ef       	ldi	r20, 0xFF	; 255
 49c:	85 ea       	ldi	r24, 0xA5	; 165
 49e:	9e e0       	ldi	r25, 0x0E	; 14
 4a0:	41 50       	subi	r20, 0x01	; 1
 4a2:	80 40       	sbci	r24, 0x00	; 0
 4a4:	90 40       	sbci	r25, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <shiftrightholdledon+0x24>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <shiftrightholdledon+0x2e>
 4aa:	00 00       	nop
}

void shiftrightholdledon(void)
{
	PORTA = 0x00;
	for (int i = 0; i<8; i++)
 4ac:	2f 5f       	subi	r18, 0xFF	; 255
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	28 30       	cpi	r18, 0x08	; 8
 4b2:	31 05       	cpc	r19, r1
 4b4:	3c f3       	brlt	.-50     	; 0x484 <shiftrightholdledon+0x8>
	{
		PORTA |= 0x80 >> i;
		_delay_ms(300);
	}
}
 4b6:	08 95       	ret

000004b8 <foff>:

void foff(void)
{
	for (int i = 0; i<4; i++)
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	1e c0       	rjmp	.+60     	; 0x4fa <foff+0x42>
	{
		PORTA = (0x80 >> i) | (0x01 << i);
 4be:	80 e8       	ldi	r24, 0x80	; 128
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	ac 01       	movw	r20, r24
 4c4:	02 2e       	mov	r0, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <foff+0x14>
 4c8:	55 95       	asr	r21
 4ca:	47 95       	ror	r20
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <foff+0x10>
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <foff+0x24>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <foff+0x20>
 4e0:	84 2b       	or	r24, r20
 4e2:	8b bb       	out	0x1b, r24	; 27
 4e4:	4f ef       	ldi	r20, 0xFF	; 255
 4e6:	85 ea       	ldi	r24, 0xA5	; 165
 4e8:	9e e0       	ldi	r25, 0x0E	; 14
 4ea:	41 50       	subi	r20, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <foff+0x32>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <foff+0x3c>
 4f4:	00 00       	nop
	}
}

void foff(void)
{
	for (int i = 0; i<4; i++)
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	24 30       	cpi	r18, 0x04	; 4
 4fc:	31 05       	cpc	r19, r1
 4fe:	fc f2       	brlt	.-66     	; 0x4be <foff+0x6>
	{
		PORTA = (0x80 >> i) | (0x01 << i);
		_delay_ms(300);
		
	}
}
 500:	08 95       	ret

00000502 <floweron>:

void floweron(void)
{
	for (int i = 0; i<4; i++)
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	1e c0       	rjmp	.+60     	; 0x544 <floweron+0x42>
	{
		PORTA = (0x10 << i) | (0x08 >> i);
 508:	80 e1       	ldi	r24, 0x10	; 16
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	ac 01       	movw	r20, r24
 50e:	02 2e       	mov	r0, r18
 510:	02 c0       	rjmp	.+4      	; 0x516 <floweron+0x14>
 512:	44 0f       	add	r20, r20
 514:	55 1f       	adc	r21, r21
 516:	0a 94       	dec	r0
 518:	e2 f7       	brpl	.-8      	; 0x512 <floweron+0x10>
 51a:	88 e0       	ldi	r24, 0x08	; 8
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 2e       	mov	r0, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <floweron+0x24>
 522:	95 95       	asr	r25
 524:	87 95       	ror	r24
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <floweron+0x20>
 52a:	84 2b       	or	r24, r20
 52c:	8b bb       	out	0x1b, r24	; 27
 52e:	4f ef       	ldi	r20, 0xFF	; 255
 530:	85 ea       	ldi	r24, 0xA5	; 165
 532:	9e e0       	ldi	r25, 0x0E	; 14
 534:	41 50       	subi	r20, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <floweron+0x32>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <floweron+0x3c>
 53e:	00 00       	nop
	}
}

void floweron(void)
{
	for (int i = 0; i<4; i++)
 540:	2f 5f       	subi	r18, 0xFF	; 255
 542:	3f 4f       	sbci	r19, 0xFF	; 255
 544:	24 30       	cpi	r18, 0x04	; 4
 546:	31 05       	cpc	r19, r1
 548:	fc f2       	brlt	.-66     	; 0x508 <floweron+0x6>
	{
		PORTA = (0x10 << i) | (0x08 >> i);
		_delay_ms(300);
	}
 54a:	08 95       	ret

0000054c <__vector_16>:
// 3. 8 bit Timer OV : 4us * 256 = 1.024ms
// 256개의 pulse 를 count 하면 이곳으로 온다
//

ISR(TIMER0_OVF_vect) // 인터럽트 루틴을 길게 짤 수록 output delay가 증가하여 원하는 시간에 출력이 나오지 않음
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	0b b6       	in	r0, 0x3b	; 59
 558:	0f 92       	push	r0
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
	TCNT0 = 6; // TCNT를 6~256 == > 정확히 1ms 를 유지하기 위해
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	82 bf       	out	0x32, r24	; 50
	// TINT 0 OVF INT
	ms_count++;
 576:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ms_count>
 57a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <ms_count+0x1>
 57e:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <ms_count+0x2>
 582:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <ms_count+0x3>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	a1 1d       	adc	r26, r1
 58a:	b1 1d       	adc	r27, r1
 58c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <ms_count>
 590:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <ms_count+0x1>
 594:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <ms_count+0x2>
 598:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <ms_count+0x3>

	if (ms_count >= 1000)   // 1000ms ==> 1sec
 59c:	88 3e       	cpi	r24, 0xE8	; 232
 59e:	93 40       	sbci	r25, 0x03	; 3
 5a0:	a1 05       	cpc	r26, r1
 5a2:	b1 05       	cpc	r27, r1
 5a4:	e0 f0       	brcs	.+56     	; 0x5de <__vector_16+0x92>
	{
		ms_count=0;
 5a6:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <ms_count>
 5aa:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <ms_count+0x1>
 5ae:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <ms_count+0x2>
 5b2:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <ms_count+0x3>
		sec_count++;    // sec counter 증가
 5b6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <sec_count>
 5ba:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <sec_count+0x1>
 5be:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <sec_count+0x2>
 5c2:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <sec_count+0x3>
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	a1 1d       	adc	r26, r1
 5ca:	b1 1d       	adc	r27, r1
 5cc:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <sec_count>
 5d0:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <sec_count+0x1>
 5d4:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <sec_count+0x2>
 5d8:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <sec_count+0x3>
		inc_time_sec(); // 1초에 한번 씩 call
 5dc:	32 d1       	rcall	.+612    	; 0x842 <inc_time_sec>
	}
	if (ms_count%4 == 0)  //4ms 마다 fnd를 display
 5de:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ms_count>
 5e2:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <ms_count+0x1>
 5e6:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <ms_count+0x2>
 5ea:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <ms_count+0x3>
 5ee:	83 70       	andi	r24, 0x03	; 3
 5f0:	99 27       	eor	r25, r25
 5f2:	aa 27       	eor	r26, r26
 5f4:	bb 27       	eor	r27, r27
 5f6:	89 2b       	or	r24, r25
 5f8:	8a 2b       	or	r24, r26
 5fa:	8b 2b       	or	r24, r27
	display_fnd();
 5fc:	09 f4       	brne	.+2      	; 0x600 <__vector_16+0xb4>
 5fe:	ff dd       	rcall	.-1026   	; 0x1fe <display_fnd>
	
	if(stopwatch_state == RUN)
 600:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <stopwatch_state>
 604:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <stopwatch_state+0x1>
 608:	01 97       	sbiw	r24, 0x01	; 1
	inc_stopwatch_clock();
 60a:	09 f4       	brne	.+2      	; 0x60e <__vector_16+0xc2>
 60c:	79 d0       	rcall	.+242    	; 0x700 <inc_stopwatch_clock>
	
	if(get_button3())			// timer reset
 60e:	be dd       	rcall	.-1156   	; 0x18c <get_button3>
 610:	89 2b       	or	r24, r25
 612:	29 f0       	breq	.+10     	; 0x61e <__vector_16+0xd2>
 614:	ea e8       	ldi	r30, 0x8A	; 138
	{
		time_clock.sec = 0;
 616:	f1 e0       	ldi	r31, 0x01	; 1
 618:	12 82       	std	Z+2, r1	; 0x02
 61a:	11 82       	std	Z+1, r1	; 0x01
		time_clock.min = 0;
 61c:	10 82       	st	Z, r1
		time_clock.hour = 0;
 61e:	ff 91       	pop	r31
	}	
}
 620:	ef 91       	pop	r30
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0b be       	out	0x3b, r0	; 59
 63a:	0f 90       	pop	r0
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti

00000644 <init_timer0>:
 644:	86 e0       	ldi	r24, 0x06	; 6
	}
}

void init_timer0()
{
	TCNT0 = 6;
 646:	82 bf       	out	0x32, r24	; 50
	
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00);  //  분주비를 64로 설정
 648:	83 b7       	in	r24, 0x33	; 51
 64a:	84 60       	ori	r24, 0x04	; 4
 64c:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1 << TOIE0);
 64e:	87 b7       	in	r24, 0x37	; 55
 650:	81 60       	ori	r24, 0x01	; 1
 652:	87 bf       	out	0x37, r24	; 55
 654:	08 95       	ret

00000656 <main>:
int mode = WATCH;



int main(void)
{
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	00 d0       	rcall	.+0      	; 0x65c <main+0x6>
 65c:	1f 92       	push	r1
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
	TIME myTIME; // 시계를 구동
	
	init_led();
 662:	b7 de       	rcall	.-658    	; 0x3d2 <init_led>
	init_fnd();
 664:	af de       	rcall	.-674    	; 0x3c4 <init_fnd>
	init_button();
 666:	30 dd       	rcall	.-1440   	; 0xc8 <init_button>
	init_uart0(); // UART0를 초기화 한다.
 668:	41 d1       	rcall	.+642    	; 0x8ec <init_uart0>
 66a:	d8 d1       	rcall	.+944    	; 0xa1c <init_UART1>
	init_UART1(); // UART1를 초기화 한다.
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	91 e0       	ldi	r25, 0x01	; 1
	stdout = &OUTPUT; // for printf /fprintf(stdout, "test"); ==> printf stdin : 입력
 670:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <__iob+0x3>
 674:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <__iob+0x2>
 678:	e5 df       	rcall	.-54     	; 0x644 <init_timer0>
	init_timer0();
 67a:	78 94       	sei
 67c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <mode+0x1>
	sei();			 // global interrupt 활성화
	
	mode = WATCH; // 시계모드로 시작
 680:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <mode>
 684:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <stopwatch_state+0x1>
	stopwatch_state = STOP;
 688:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <stopwatch_state>
 68c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <mode>
	
	
	while (1)
	{
		switch(mode)
 690:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <mode+0x1>
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	19 f0       	breq	.+6      	; 0x69e <main+0x48>
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	b9 f0       	breq	.+46     	; 0x6ca <main+0x74>
 69c:	2e c0       	rjmp	.+92     	; 0x6fa <main+0xa4>
 69e:	ce 01       	movw	r24, r28
		{
			case WATCH :
			get_time_clock(&myTIME);
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	c4 d0       	rcall	.+392    	; 0x82c <get_time_clock>
 6a4:	2a 81       	ldd	r18, Y+2	; 0x02
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
			set_fnd_data(myTIME.min*100 + myTIME.sec);
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	34 e6       	ldi	r19, 0x64	; 100
 6ac:	23 9f       	mul	r18, r19
 6ae:	80 0d       	add	r24, r0
 6b0:	91 1d       	adc	r25, r1
 6b2:	11 24       	eor	r1, r1
 6b4:	9a dd       	rcall	.-1228   	; 0x1ea <set_fnd_data>
 6b6:	0c dd       	rcall	.-1512   	; 0xd0 <get_button1>
			if(get_button1())
 6b8:	89 2b       	or	r24, r25
 6ba:	f9 f0       	breq	.+62     	; 0x6fa <main+0xa4>
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
			{
				mode = STOPWATCH;
 6c0:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <mode+0x1>
 6c4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <mode>
 6c8:	18 c0       	rjmp	.+48     	; 0x6fa <main+0xa4>
 6ca:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <stopwatch_state>
			}
			break;
			
			case STOPWATCH :
			switch (stopwatch_state)
 6ce:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <stopwatch_state+0x1>
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	91 05       	cpc	r25, r1
 6d6:	39 f0       	breq	.+14     	; 0x6e6 <main+0x90>
 6d8:	82 30       	cpi	r24, 0x02	; 2
 6da:	91 05       	cpc	r25, r1
 6dc:	31 f0       	breq	.+12     	; 0x6ea <main+0x94>
			{
				case STOP :
				stopwatch_stop();
 6de:	89 2b       	or	r24, r25
 6e0:	29 f4       	brne	.+10     	; 0x6ec <main+0x96>
				break;
 6e2:	6e d0       	rcall	.+220    	; 0x7c0 <stopwatch_stop>
				case RUN :
				stopwatch_run();
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <main+0x96>
				break;
 6e6:	5f d0       	rcall	.+190    	; 0x7a6 <stopwatch_run>
				case RESET :
				
				stopwatch_reset();
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <main+0x96>
 6ea:	82 d0       	rcall	.+260    	; 0x7f0 <stopwatch_reset>
				break;

			}
			if(get_button1())
 6ec:	f1 dc       	rcall	.-1566   	; 0xd0 <get_button1>
 6ee:	89 2b       	or	r24, r25
 6f0:	21 f0       	breq	.+8      	; 0x6fa <main+0xa4>
 6f2:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <mode+0x1>
			{
				
				mode = WATCH;
 6f6:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <mode>
 6fa:	0b d1       	rcall	.+534    	; 0x912 <pc_command_processing>
			}
			break;
		}
		
		
		pc_command_processing();
 6fc:	9f d1       	rcall	.+830    	; 0xa3c <bt_command_processing>
 6fe:	c6 cf       	rjmp	.-116    	; 0x68c <main+0x36>

00000700 <inc_stopwatch_clock>:
int stopwatchclock_sec=0;
uint8_t count =0;
// 1초에 1번씩 call을 한다. 분초
void inc_stopwatch_clock(void)
{
	count++;
 700:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <count>
 704:	8f 5f       	subi	r24, 0xFF	; 255
 706:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <count>
	if (count >= 100)
 70a:	84 36       	cpi	r24, 0x64	; 100
 70c:	78 f1       	brcs	.+94     	; 0x76c <inc_stopwatch_clock+0x6c>
	{
		count=0;
 70e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <count>
		stopwatchclock_sec++;
 712:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <stopwatchclock_sec>
 716:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <stopwatchclock_sec+0x1>
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <stopwatchclock_sec+0x1>
 720:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <stopwatchclock_sec>
		if (stopwatchclock_sec >= 60)
 724:	cc 97       	sbiw	r24, 0x3c	; 60
 726:	14 f1       	brlt	.+68     	; 0x76c <inc_stopwatch_clock+0x6c>
		{
			stopwatchclock_sec=0;
 728:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <stopwatchclock_sec+0x1>
 72c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <stopwatchclock_sec>
			stopwatchclock_min++;
 730:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <stopwatchclock_min>
 734:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <stopwatchclock_min+0x1>
 738:	01 96       	adiw	r24, 0x01	; 1
 73a:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <stopwatchclock_min+0x1>
 73e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <stopwatchclock_min>
			if (stopwatchclock_min >= 60)
 742:	cc 97       	sbiw	r24, 0x3c	; 60
 744:	9c f0       	brlt	.+38     	; 0x76c <inc_stopwatch_clock+0x6c>
			{
				stopwatchclock_min=0;
 746:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <stopwatchclock_min+0x1>
 74a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <stopwatchclock_min>
				stopwatchclock_hour++;
 74e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <stopwatchclock_hour>
 752:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <stopwatchclock_hour+0x1>
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <stopwatchclock_hour+0x1>
 75c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <stopwatchclock_hour>
				if (stopwatchclock_hour >= 24)
 760:	48 97       	sbiw	r24, 0x18	; 24
 762:	24 f0       	brlt	.+8      	; 0x76c <inc_stopwatch_clock+0x6c>
				{
					stopwatchclock_hour=0;
 764:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <stopwatchclock_hour+0x1>
 768:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <stopwatchclock_hour>
				}
			}
		}
	}
	stopwatchclock = (stopwatchclock_sec + stopwatchclock_min *100);	
 76c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <stopwatchclock_min>
 770:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <stopwatchclock_min+0x1>
 774:	44 e6       	ldi	r20, 0x64	; 100
 776:	48 9f       	mul	r20, r24
 778:	90 01       	movw	r18, r0
 77a:	49 9f       	mul	r20, r25
 77c:	30 0d       	add	r19, r0
 77e:	11 24       	eor	r1, r1
 780:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <stopwatchclock_sec>
 784:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <stopwatchclock_sec+0x1>
 788:	82 0f       	add	r24, r18
 78a:	93 1f       	adc	r25, r19
 78c:	09 2e       	mov	r0, r25
 78e:	00 0c       	add	r0, r0
 790:	aa 0b       	sbc	r26, r26
 792:	bb 0b       	sbc	r27, r27
 794:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <stopwatchclock>
 798:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <stopwatchclock+0x1>
 79c:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <stopwatchclock+0x2>
 7a0:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <stopwatchclock+0x3>
 7a4:	08 95       	ret

000007a6 <stopwatch_run>:
}

stopwatch_run()
{
	set_fnd_data(stopwatchclock);  // FND에 출력 할 data가 넘어 간다. 
 7a6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <stopwatchclock>
 7aa:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <stopwatchclock+0x1>
 7ae:	1d dd       	rcall	.-1478   	; 0x1ea <set_fnd_data>
	
	if (get_button2())
 7b0:	be dc       	rcall	.-1668   	; 0x12e <get_button2>
 7b2:	89 2b       	or	r24, r25
 7b4:	21 f0       	breq	.+8      	; 0x7be <stopwatch_run+0x18>
 7b6:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <stopwatch_state+0x1>
	{
		stopwatch_state=STOP;
 7ba:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <stopwatch_state>
 7be:	08 95       	ret

000007c0 <stopwatch_stop>:
	}
}
 7c0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <stopwatchclock>
stopwatch_stop()
{
	set_fnd_data(stopwatchclock);  // FND에 출력 할 data가 넘어 간다. 	
 7c4:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <stopwatchclock+0x1>
 7c8:	10 dd       	rcall	.-1504   	; 0x1ea <set_fnd_data>
	if (get_button2())
 7ca:	b1 dc       	rcall	.-1694   	; 0x12e <get_button2>
 7cc:	89 2b       	or	r24, r25
 7ce:	31 f0       	breq	.+12     	; 0x7dc <stopwatch_stop+0x1c>
 7d0:	81 e0       	ldi	r24, 0x01	; 1
	{
		stopwatch_state=RUN;
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <stopwatch_state+0x1>
 7d8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <stopwatch_state>
	}
	if (get_button3())
 7dc:	d7 dc       	rcall	.-1618   	; 0x18c <get_button3>
 7de:	89 2b       	or	r24, r25
 7e0:	31 f0       	breq	.+12     	; 0x7ee <stopwatch_stop+0x2e>
 7e2:	82 e0       	ldi	r24, 0x02	; 2
	{
		stopwatch_state=RESET;
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <stopwatch_state+0x1>
 7ea:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <stopwatch_state>
 7ee:	08 95       	ret

000007f0 <stopwatch_reset>:
	}	
}
 7f0:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <stopwatchclock>
stopwatch_reset()
{
	stopwatchclock=0;
 7f4:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <stopwatchclock+0x1>
 7f8:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <stopwatchclock+0x2>
 7fc:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <stopwatchclock+0x3>
	stopwatchclock_hour=0;
 800:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <stopwatchclock_hour+0x1>
 804:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <stopwatchclock_hour>
	stopwatchclock_min=0;
 808:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <stopwatchclock_min+0x1>
 80c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <stopwatchclock_min>
	stopwatchclock_sec=0;
 810:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <stopwatchclock_sec+0x1>
 814:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <stopwatchclock_sec>
	count=0;
 818:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <count>
	
	set_fnd_data(stopwatchclock);
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	e4 dc       	rcall	.-1592   	; 0x1ea <set_fnd_data>
	stopwatch_state=STOP;
 822:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <stopwatch_state+0x1>
 826:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <stopwatch_state>
		
}
 82a:	08 95       	ret

0000082c <get_time_clock>:
	*time = time_clock;
}

void set_time_clock(TIME time)
{
	time_clock = time;
 82c:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <time_clock>
 830:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <time_clock+0x1>
 834:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <time_clock+0x2>
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18
 83c:	31 83       	std	Z+1, r19	; 0x01
 83e:	42 83       	std	Z+2, r20	; 0x02
 840:	08 95       	ret

00000842 <inc_time_sec>:
}

// 1초에 1번씩 call을 한다. 분초 
void inc_time_sec(void)
{
	time_clock.sec++;
 842:	ea e8       	ldi	r30, 0x8A	; 138
 844:	f1 e0       	ldi	r31, 0x01	; 1
 846:	82 81       	ldd	r24, Z+2	; 0x02
 848:	8f 5f       	subi	r24, 0xFF	; 255
 84a:	82 83       	std	Z+2, r24	; 0x02
	if (time_clock.sec >= 60)
 84c:	8c 33       	cpi	r24, 0x3C	; 60
 84e:	70 f0       	brcs	.+28     	; 0x86c <inc_time_sec+0x2a>
	{
		time_clock.sec=0;
 850:	12 82       	std	Z+2, r1	; 0x02
		time_clock.min++;
 852:	81 81       	ldd	r24, Z+1	; 0x01
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	81 83       	std	Z+1, r24	; 0x01
		if (time_clock.min >= 60)
 858:	8c 33       	cpi	r24, 0x3C	; 60
 85a:	40 f0       	brcs	.+16     	; 0x86c <inc_time_sec+0x2a>
		{
			time_clock.min=0;
 85c:	11 82       	std	Z+1, r1	; 0x01
			time_clock.hour++;
 85e:	80 81       	ld	r24, Z
 860:	8f 5f       	subi	r24, 0xFF	; 255
 862:	80 83       	st	Z, r24
			if (time_clock.hour >= 24)
 864:	88 31       	cpi	r24, 0x18	; 24
 866:	10 f0       	brcs	.+4      	; 0x86c <inc_time_sec+0x2a>
			{
				time_clock.hour=0;
 868:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <time_clock>
 86c:	08 95       	ret

0000086e <__vector_18>:
#include <string.h>  //  strncmp, strcpy 등등

#include "uart0.h"

ISR(USART0_RX_vect)
{
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	11 24       	eor	r1, r1
 878:	0b b6       	in	r0, 0x3b	; 59
 87a:	0f 92       	push	r0
 87c:	2f 93       	push	r18
 87e:	3f 93       	push	r19
 880:	4f 93       	push	r20
 882:	5f 93       	push	r21
 884:	8f 93       	push	r24
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
	unsigned char data;
	
	data = UDR0;			  //  uart0의 hardware register(UDR0)로 1byte를 읽어 들인다.
 88a:	8c b1       	in	r24, 0x0c	; 12
	
	if(data == '\r' || data == '\n')  //  문장의 끝이면 
 88c:	8d 30       	cpi	r24, 0x0D	; 13
 88e:	11 f0       	breq	.+4      	; 0x894 <__vector_18+0x26>
 890:	8a 30       	cpi	r24, 0x0A	; 10
 892:	79 f4       	brne	.+30     	; 0x8b2 <__vector_18+0x44>
	{
		rx_buffer[i] = '\0';    //  문장의 끝을 가리키는 NULL
 894:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <i>
 898:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <i+0x1>
 89c:	eb 52       	subi	r30, 0x2B	; 43
 89e:	fe 4f       	sbci	r31, 0xFE	; 254
 8a0:	10 82       	st	Z, r1
		i = 0;				  //  개선점 : circular queue (환영큐)로 개선을 해야 한다.
 8a2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <i+0x1>
 8a6:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <i>
							  //  이렇게 구성하면 새로운 메세지가 올 시 덮어 쓴다.
		rx_ready_flag = 1;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <rx_ready_flag>
 8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <__vector_18+0x62>
	}
	else
	{
		rx_buffer[i++] = data;  //  1. rx_buff[i] = data  2. i++
 8b2:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <i>
 8b6:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <i+0x1>
 8ba:	a9 01       	movw	r20, r18
 8bc:	4f 5f       	subi	r20, 0xFF	; 255
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	50 93 8e 01 	sts	0x018E, r21	; 0x80018e <i+0x1>
 8c4:	40 93 8d 01 	sts	0x018D, r20	; 0x80018d <i>
 8c8:	f9 01       	movw	r30, r18
 8ca:	eb 52       	subi	r30, 0x2B	; 43
 8cc:	fe 4f       	sbci	r31, 0xFE	; 254
 8ce:	80 83       	st	Z, r24
	}
}
 8d0:	ff 91       	pop	r31
 8d2:	ef 91       	pop	r30
 8d4:	8f 91       	pop	r24
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	0f 90       	pop	r0
 8e0:	0b be       	out	0x3b, r0	; 59
 8e2:	0f 90       	pop	r0
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	0f 90       	pop	r0
 8e8:	1f 90       	pop	r1
 8ea:	18 95       	reti

000008ec <init_uart0>:
//  2. 비동기식, data 8bit, non parity
//  3. RX{수신) inturrupt 활성화

void init_uart0(void)
{
	UBRR0H = 0x00;
 8ec:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;    //  9600bps  p219  표 9-9
 8f0:	8f ec       	ldi	r24, 0xCF	; 207
 8f2:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1 << U2X0);
 8f4:	8b b1       	in	r24, 0x0b	; 11
 8f6:	82 60       	ori	r24, 0x02	; 2
 8f8:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06;  //  ASYNC(비동기) data 8bit, non parity
 8fa:	e5 e9       	ldi	r30, 0x95	; 149
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	86 60       	ori	r24, 0x06	; 6
 902:	80 83       	st	Z, r24
	
				     //  RXEN0 : UART0로부터 수신이 가능하도록 설정
					 //  TXEN0 : UART0로부터 송신이 가능하도록 설정
					 //  RXCIE0 : UART0로부터 1byte가 들어오면 rx(수신) interrupt 를 띄워 달라
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); 
 904:	88 e9       	ldi	r24, 0x98	; 152
 906:	8a b9       	out	0x0a, r24	; 10
 908:	08 95       	ret

0000090a <UART0_transmit>:
}

void UART0_transmit(uint8_t data)	   //  UART0로 1byte를 보내는 함수
{
	while (!(UCSR0A & (1 << UDRE0)))  //  data 가 전송중이면 data 가 모두 전송될 때 까지 기다린다.
 90a:	5d 9b       	sbis	0x0b, 5	; 11
 90c:	fe cf       	rjmp	.-4      	; 0x90a <UART0_transmit>
		;							   //  no operation (아무 액션도 취하지 않는다)
	UDR0 = data;					   //  hardware 전송 register 에 data 를 보낸다.
 90e:	8c b9       	out	0x0c, r24	; 12
 910:	08 95       	ret

00000912 <pc_command_processing>:

extern int led_command;

void pc_command_processing()
{
	if (rx_ready_flag)			   //  if (rx_ready_flag >= 1)
 912:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <rx_ready_flag>
 916:	88 23       	and	r24, r24
 918:	09 f4       	brne	.+2      	; 0x91c <pc_command_processing+0xa>
 91a:	5f c0       	rjmp	.+190    	; 0x9da <pc_command_processing+0xc8>
	{
		rx_ready_flag = 0;
 91c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <rx_ready_flag>
		printf("%s\n", rx_buffer);
 920:	85 ed       	ldi	r24, 0xD5	; 213
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	2d d1       	rcall	.+602    	; 0xb80 <puts>
		if (strncmp(rx_buffer, "shiftleftledon", strlen("shiftleftledon")-1)==0)   //  -1 : null 을 빼기위함
 926:	4d e0       	ldi	r20, 0x0D	; 13
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	68 e1       	ldi	r22, 0x18	; 24
 92c:	71 e0       	ldi	r23, 0x01	; 1
 92e:	85 ed       	ldi	r24, 0xD5	; 213
 930:	91 e0       	ldi	r25, 0x01	; 1
 932:	18 d1       	rcall	.+560    	; 0xb64 <strncmp>
 934:	89 2b       	or	r24, r25
 936:	31 f4       	brne	.+12     	; 0x944 <pc_command_processing+0x32>
			led_command = 1;
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 940:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx_buffer, "shiftrightledon", strlen("shiftrightledon")-1)==0)   //  -1 : null 을 빼기위함
 944:	4e e0       	ldi	r20, 0x0E	; 14
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	67 e2       	ldi	r22, 0x27	; 39
 94a:	71 e0       	ldi	r23, 0x01	; 1
 94c:	85 ed       	ldi	r24, 0xD5	; 213
 94e:	91 e0       	ldi	r25, 0x01	; 1
 950:	09 d1       	rcall	.+530    	; 0xb64 <strncmp>
 952:	89 2b       	or	r24, r25
 954:	31 f4       	brne	.+12     	; 0x962 <pc_command_processing+0x50>
			led_command = 2;
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 95e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx_buffer, "shiftleftholdledon", strlen("shiftleftholdledon")-1)==0)   //  -1 : null 을 빼기위함, 앞의수가 작으면 -1, 크면 1, 같으면 0
 962:	41 e1       	ldi	r20, 0x11	; 17
 964:	50 e0       	ldi	r21, 0x00	; 0
 966:	67 e3       	ldi	r22, 0x37	; 55
 968:	71 e0       	ldi	r23, 0x01	; 1
 96a:	85 ed       	ldi	r24, 0xD5	; 213
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	fa d0       	rcall	.+500    	; 0xb64 <strncmp>
 970:	89 2b       	or	r24, r25
 972:	31 f4       	brne	.+12     	; 0x980 <pc_command_processing+0x6e>
			led_command = 3;
 974:	83 e0       	ldi	r24, 0x03	; 3
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 97c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx_buffer, "shiftrightholdledon", strlen("shiftrightholdledon")-1)==0)   //  -1 : null 을 빼기위함
 980:	42 e1       	ldi	r20, 0x12	; 18
 982:	50 e0       	ldi	r21, 0x00	; 0
 984:	6a e4       	ldi	r22, 0x4A	; 74
 986:	71 e0       	ldi	r23, 0x01	; 1
 988:	85 ed       	ldi	r24, 0xD5	; 213
 98a:	91 e0       	ldi	r25, 0x01	; 1
 98c:	eb d0       	rcall	.+470    	; 0xb64 <strncmp>
 98e:	89 2b       	or	r24, r25
 990:	31 f4       	brne	.+12     	; 0x99e <pc_command_processing+0x8c>
			led_command = 4;
 992:	84 e0       	ldi	r24, 0x04	; 4
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 99a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx_buffer, "foff", strlen("foff")-1)==0)   //  -1 : null 을 빼기위함
 99e:	43 e0       	ldi	r20, 0x03	; 3
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	6e e5       	ldi	r22, 0x5E	; 94
 9a4:	71 e0       	ldi	r23, 0x01	; 1
 9a6:	85 ed       	ldi	r24, 0xD5	; 213
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	dc d0       	rcall	.+440    	; 0xb64 <strncmp>
 9ac:	89 2b       	or	r24, r25
 9ae:	31 f4       	brne	.+12     	; 0x9bc <pc_command_processing+0xaa>
			led_command = 5;
 9b0:	85 e0       	ldi	r24, 0x05	; 5
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 9b8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx_buffer, "floweron", strlen("floweron")-1)==0)   //  -1 : null 을 빼기위함
 9bc:	47 e0       	ldi	r20, 0x07	; 7
 9be:	50 e0       	ldi	r21, 0x00	; 0
 9c0:	63 e6       	ldi	r22, 0x63	; 99
 9c2:	71 e0       	ldi	r23, 0x01	; 1
 9c4:	85 ed       	ldi	r24, 0xD5	; 213
 9c6:	91 e0       	ldi	r25, 0x01	; 1
 9c8:	cd d0       	rcall	.+410    	; 0xb64 <strncmp>
 9ca:	89 2b       	or	r24, r25
 9cc:	31 f4       	brne	.+12     	; 0x9da <pc_command_processing+0xc8>
			led_command = 6;
 9ce:	86 e0       	ldi	r24, 0x06	; 6
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 9d6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
	}
	switch(led_command)
 9da:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <led_command>
 9de:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <led_command+0x1>
 9e2:	83 30       	cpi	r24, 0x03	; 3
 9e4:	91 05       	cpc	r25, r1
 9e6:	91 f0       	breq	.+36     	; 0xa0c <pc_command_processing+0xfa>
 9e8:	34 f4       	brge	.+12     	; 0x9f6 <pc_command_processing+0xe4>
 9ea:	81 30       	cpi	r24, 0x01	; 1
 9ec:	91 05       	cpc	r25, r1
 9ee:	51 f0       	breq	.+20     	; 0xa04 <pc_command_processing+0xf2>
 9f0:	02 97       	sbiw	r24, 0x02	; 2
 9f2:	51 f0       	breq	.+20     	; 0xa08 <pc_command_processing+0xf6>
 9f4:	08 95       	ret
 9f6:	85 30       	cpi	r24, 0x05	; 5
 9f8:	91 05       	cpc	r25, r1
 9fa:	61 f0       	breq	.+24     	; 0xa14 <pc_command_processing+0x102>
 9fc:	4c f0       	brlt	.+18     	; 0xa10 <pc_command_processing+0xfe>
	{
		case 1:
		shiftleftledon();
 9fe:	06 97       	sbiw	r24, 0x06	; 6
		break;
 a00:	59 f0       	breq	.+22     	; 0xa18 <pc_command_processing+0x106>
		case 2:
		shiftrightledon();
 a02:	08 95       	ret
		break;
 a04:	e9 cc       	rjmp	.-1582   	; 0x3d8 <shiftleftledon>
		case 3:
		shiftleftholdledon();
 a06:	08 95       	ret
 a08:	01 cd       	rjmp	.-1534   	; 0x40c <shiftrightledon>
		break;
 a0a:	08 95       	ret
		case 4:
		shiftrightholdledon();
 a0c:	19 cd       	rjmp	.-1486   	; 0x440 <shiftleftholdledon>
 a0e:	08 95       	ret
		break;
 a10:	35 cd       	rjmp	.-1430   	; 0x47c <shiftrightholdledon>
		case 5:
		foff();
 a12:	08 95       	ret
 a14:	51 cd       	rjmp	.-1374   	; 0x4b8 <foff>
		break;
 a16:	08 95       	ret
		case 6:
		floweron();
 a18:	74 cd       	rjmp	.-1304   	; 0x502 <floweron>
 a1a:	08 95       	ret

00000a1c <init_UART1>:
 a1c:	ea e9       	ldi	r30, 0x9A	; 154
extern int led_command;

ISR(USART1_RX_vect)
{
	UART1_ISR_Receive();
}
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	80 81       	ld	r24, Z
 a22:	88 69       	ori	r24, 0x98	; 152
 a24:	80 83       	st	Z, r24
 a26:	eb e9       	ldi	r30, 0x9B	; 155
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	82 60       	ori	r24, 0x02	; 2
 a2e:	80 83       	st	Z, r24
 a30:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 a34:	8f ec       	ldi	r24, 0xCF	; 207
 a36:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 a3a:	08 95       	ret

00000a3c <bt_command_processing>:
	}
}

void bt_command_processing()
{
	if (rx1ReadyFlag)			   //  if (rx_ready_flag >= 1)
 a3c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <rx1ReadyFlag>
 a40:	88 23       	and	r24, r24
 a42:	09 f4       	brne	.+2      	; 0xa46 <bt_command_processing+0xa>
 a44:	5f c0       	rjmp	.+190    	; 0xb04 <bt_command_processing+0xc8>
	{
		rx1ReadyFlag = 0;
 a46:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <rx1ReadyFlag>
		printf("%s\n", rx1String);
 a4a:	81 e9       	ldi	r24, 0x91	; 145
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	98 d0       	rcall	.+304    	; 0xb80 <puts>
		if (strncmp(rx1String, "shiftleftledon", strlen("shiftleftledon")-1)==0)   //  -1 : null 을 빼기위함
 a50:	4d e0       	ldi	r20, 0x0D	; 13
 a52:	50 e0       	ldi	r21, 0x00	; 0
 a54:	68 e1       	ldi	r22, 0x18	; 24
 a56:	71 e0       	ldi	r23, 0x01	; 1
 a58:	81 e9       	ldi	r24, 0x91	; 145
 a5a:	91 e0       	ldi	r25, 0x01	; 1
 a5c:	83 d0       	rcall	.+262    	; 0xb64 <strncmp>
 a5e:	89 2b       	or	r24, r25
 a60:	31 f4       	brne	.+12     	; 0xa6e <bt_command_processing+0x32>
		led_command = 1;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 a6a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx1String, "shiftrightledon", strlen("shiftrightledon")-1)==0)   //  -1 : null 을 빼기위함
 a6e:	4e e0       	ldi	r20, 0x0E	; 14
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	67 e2       	ldi	r22, 0x27	; 39
 a74:	71 e0       	ldi	r23, 0x01	; 1
 a76:	81 e9       	ldi	r24, 0x91	; 145
 a78:	91 e0       	ldi	r25, 0x01	; 1
 a7a:	74 d0       	rcall	.+232    	; 0xb64 <strncmp>
 a7c:	89 2b       	or	r24, r25
 a7e:	31 f4       	brne	.+12     	; 0xa8c <bt_command_processing+0x50>
		led_command = 2;
 a80:	82 e0       	ldi	r24, 0x02	; 2
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 a88:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx1String, "shiftleftholdledon", strlen("shiftleftholdledon")-1)==0)   //  -1 : null 을 빼기위함, 앞의수가 작으면 -1, 크면 1, 같으면 0
 a8c:	41 e1       	ldi	r20, 0x11	; 17
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	67 e3       	ldi	r22, 0x37	; 55
 a92:	71 e0       	ldi	r23, 0x01	; 1
 a94:	81 e9       	ldi	r24, 0x91	; 145
 a96:	91 e0       	ldi	r25, 0x01	; 1
 a98:	65 d0       	rcall	.+202    	; 0xb64 <strncmp>
 a9a:	89 2b       	or	r24, r25
 a9c:	31 f4       	brne	.+12     	; 0xaaa <bt_command_processing+0x6e>
		led_command = 3;
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 aa6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx1String, "shiftrightholdledon", strlen("shiftrightholdledon")-1)==0)   //  -1 : null 을 빼기위함
 aaa:	42 e1       	ldi	r20, 0x12	; 18
 aac:	50 e0       	ldi	r21, 0x00	; 0
 aae:	6a e4       	ldi	r22, 0x4A	; 74
 ab0:	71 e0       	ldi	r23, 0x01	; 1
 ab2:	81 e9       	ldi	r24, 0x91	; 145
 ab4:	91 e0       	ldi	r25, 0x01	; 1
 ab6:	56 d0       	rcall	.+172    	; 0xb64 <strncmp>
 ab8:	89 2b       	or	r24, r25
 aba:	31 f4       	brne	.+12     	; 0xac8 <bt_command_processing+0x8c>
		led_command = 4;
 abc:	84 e0       	ldi	r24, 0x04	; 4
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 ac4:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx1String, "foff", strlen("foff")-1)==0)   //  -1 : null 을 빼기위함
 ac8:	43 e0       	ldi	r20, 0x03	; 3
 aca:	50 e0       	ldi	r21, 0x00	; 0
 acc:	6e e5       	ldi	r22, 0x5E	; 94
 ace:	71 e0       	ldi	r23, 0x01	; 1
 ad0:	81 e9       	ldi	r24, 0x91	; 145
 ad2:	91 e0       	ldi	r25, 0x01	; 1
 ad4:	47 d0       	rcall	.+142    	; 0xb64 <strncmp>
 ad6:	89 2b       	or	r24, r25
 ad8:	31 f4       	brne	.+12     	; 0xae6 <bt_command_processing+0xaa>
		led_command = 5;
 ada:	85 e0       	ldi	r24, 0x05	; 5
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 ae2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
		if (strncmp(rx1String, "floweron", strlen("floweron")-1)==0)   //  -1 : null 을 빼기위함
 ae6:	47 e0       	ldi	r20, 0x07	; 7
 ae8:	50 e0       	ldi	r21, 0x00	; 0
 aea:	63 e6       	ldi	r22, 0x63	; 99
 aec:	71 e0       	ldi	r23, 0x01	; 1
 aee:	81 e9       	ldi	r24, 0x91	; 145
 af0:	91 e0       	ldi	r25, 0x01	; 1
 af2:	38 d0       	rcall	.+112    	; 0xb64 <strncmp>
 af4:	89 2b       	or	r24, r25
 af6:	31 f4       	brne	.+12     	; 0xb04 <bt_command_processing+0xc8>
		led_command = 6;
 af8:	86 e0       	ldi	r24, 0x06	; 6
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <led_command+0x1>
 b00:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <led_command>
	}
	switch(led_command)
 b04:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <led_command>
 b08:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <led_command+0x1>
 b0c:	83 30       	cpi	r24, 0x03	; 3
 b0e:	91 05       	cpc	r25, r1
 b10:	91 f0       	breq	.+36     	; 0xb36 <bt_command_processing+0xfa>
 b12:	34 f4       	brge	.+12     	; 0xb20 <bt_command_processing+0xe4>
 b14:	81 30       	cpi	r24, 0x01	; 1
 b16:	91 05       	cpc	r25, r1
 b18:	51 f0       	breq	.+20     	; 0xb2e <bt_command_processing+0xf2>
 b1a:	02 97       	sbiw	r24, 0x02	; 2
 b1c:	51 f0       	breq	.+20     	; 0xb32 <bt_command_processing+0xf6>
 b1e:	08 95       	ret
 b20:	85 30       	cpi	r24, 0x05	; 5
 b22:	91 05       	cpc	r25, r1
 b24:	61 f0       	breq	.+24     	; 0xb3e <bt_command_processing+0x102>
 b26:	4c f0       	brlt	.+18     	; 0xb3a <bt_command_processing+0xfe>
	{
		case 1:
		shiftleftledon();
 b28:	06 97       	sbiw	r24, 0x06	; 6
		break;
 b2a:	59 f0       	breq	.+22     	; 0xb42 <bt_command_processing+0x106>
		case 2:
		shiftrightledon();
 b2c:	08 95       	ret
		break;
 b2e:	54 cc       	rjmp	.-1880   	; 0x3d8 <shiftleftledon>
		case 3:
		shiftleftholdledon();
 b30:	08 95       	ret
 b32:	6c cc       	rjmp	.-1832   	; 0x40c <shiftrightledon>
		break;
 b34:	08 95       	ret
		case 4:
		shiftrightholdledon();
 b36:	84 cc       	rjmp	.-1784   	; 0x440 <shiftleftholdledon>
 b38:	08 95       	ret
		break;
 b3a:	a0 cc       	rjmp	.-1728   	; 0x47c <shiftrightholdledon>
		case 5:
		foff();
 b3c:	08 95       	ret
 b3e:	bc cc       	rjmp	.-1672   	; 0x4b8 <foff>
		break;
 b40:	08 95       	ret
		case 6:
		floweron();
 b42:	df cc       	rjmp	.-1602   	; 0x502 <floweron>
 b44:	08 95       	ret

00000b46 <__umulhisi3>:
 b46:	a2 9f       	mul	r26, r18
 b48:	b0 01       	movw	r22, r0
 b4a:	b3 9f       	mul	r27, r19
 b4c:	c0 01       	movw	r24, r0
 b4e:	a3 9f       	mul	r26, r19
 b50:	70 0d       	add	r23, r0
 b52:	81 1d       	adc	r24, r1
 b54:	11 24       	eor	r1, r1
 b56:	91 1d       	adc	r25, r1
 b58:	b2 9f       	mul	r27, r18
 b5a:	70 0d       	add	r23, r0
 b5c:	81 1d       	adc	r24, r1
 b5e:	11 24       	eor	r1, r1
 b60:	91 1d       	adc	r25, r1
 b62:	08 95       	ret

00000b64 <strncmp>:
 b64:	fb 01       	movw	r30, r22
 b66:	dc 01       	movw	r26, r24
 b68:	41 50       	subi	r20, 0x01	; 1
 b6a:	50 40       	sbci	r21, 0x00	; 0
 b6c:	30 f0       	brcs	.+12     	; 0xb7a <strncmp+0x16>
 b6e:	8d 91       	ld	r24, X+
 b70:	01 90       	ld	r0, Z+
 b72:	80 19       	sub	r24, r0
 b74:	19 f4       	brne	.+6      	; 0xb7c <strncmp+0x18>
 b76:	00 20       	and	r0, r0
 b78:	b9 f7       	brne	.-18     	; 0xb68 <strncmp+0x4>
 b7a:	88 1b       	sub	r24, r24
 b7c:	99 0b       	sbc	r25, r25
 b7e:	08 95       	ret

00000b80 <puts>:
 b80:	0f 93       	push	r16
 b82:	1f 93       	push	r17
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <__iob+0x2>
 b8c:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <__iob+0x3>
 b90:	23 81       	ldd	r18, Z+3	; 0x03
 b92:	21 ff       	sbrs	r18, 1
 b94:	1b c0       	rjmp	.+54     	; 0xbcc <puts+0x4c>
 b96:	8c 01       	movw	r16, r24
 b98:	d0 e0       	ldi	r29, 0x00	; 0
 b9a:	c0 e0       	ldi	r28, 0x00	; 0
 b9c:	f8 01       	movw	r30, r16
 b9e:	81 91       	ld	r24, Z+
 ba0:	8f 01       	movw	r16, r30
 ba2:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <__iob+0x2>
 ba6:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <__iob+0x3>
 baa:	db 01       	movw	r26, r22
 bac:	18 96       	adiw	r26, 0x08	; 8
 bae:	ed 91       	ld	r30, X+
 bb0:	fc 91       	ld	r31, X
 bb2:	19 97       	sbiw	r26, 0x09	; 9
 bb4:	88 23       	and	r24, r24
 bb6:	31 f0       	breq	.+12     	; 0xbc4 <puts+0x44>
 bb8:	09 95       	icall
 bba:	89 2b       	or	r24, r25
 bbc:	79 f3       	breq	.-34     	; 0xb9c <puts+0x1c>
 bbe:	df ef       	ldi	r29, 0xFF	; 255
 bc0:	cf ef       	ldi	r28, 0xFF	; 255
 bc2:	ec cf       	rjmp	.-40     	; 0xb9c <puts+0x1c>
 bc4:	8a e0       	ldi	r24, 0x0A	; 10
 bc6:	09 95       	icall
 bc8:	89 2b       	or	r24, r25
 bca:	19 f0       	breq	.+6      	; 0xbd2 <puts+0x52>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	9f ef       	ldi	r25, 0xFF	; 255
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <puts+0x56>
 bd2:	8d 2f       	mov	r24, r29
 bd4:	9c 2f       	mov	r25, r28
 bd6:	df 91       	pop	r29
 bd8:	cf 91       	pop	r28
 bda:	1f 91       	pop	r17
 bdc:	0f 91       	pop	r16
 bde:	08 95       	ret

00000be0 <_exit>:
 be0:	f8 94       	cli

00000be2 <__stop_program>:
 be2:	ff cf       	rjmp	.-2      	; 0xbe2 <__stop_program>
